heat_template_version: 2018-08-31

parameters:
  name:
    type: string
  server_image:
    type: string
  server_flavor:
    type: string
  ssh_key_name:
    type: string
  ca_content:
    type: string
    hidden: true
  cakey_content:
    type: string
    hidden: true
  cluster_id:
    type: string
  apiserver_address:
    type: string
  cluster_dns_service_ip:
    type: string
  kubernetes_version:
    type: string
  bootstrap_token:
    type: string
    hidden: true
  wait_condition_timeout:
    type: number
  fixed_network:
    type: string
  fixed_subnet:
    type: string
  external_network:
    type: string
    default: ""
  floating_ip_enabled:
    type: boolean
    default: false
  worker_secgroup:
    type: string
  pods_network_cidr:
    type: string
  cloud_provider_enabled:
    type: boolean
  auth_url:
    type: string
  trustee_user_id:
    type: string
  trustee_password:
    type: string
  trust_id:
    type: string

conditions:
  floating_ip_enabled: {get_param: floating_ip_enabled}

resources:
  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
      type: OS::Heat::WaitCondition
      depends_on: worker
      properties:
        handle: {get_resource: wait_handle}
        timeout: {get_param: wait_condition_timeout}

  worker:
    type: OS::Nova::Server
    properties:
      name: {get_param: name}
      image: {get_param: server_image}
      flavor: {get_param: server_flavor}
      key_name: {get_param: ssh_key_name}
      networks:
        - port: {get_resource: worker_port}
      user_data_format: RAW
      user_data:
        str_replace:
          template: {get_file: kubelet_bootstrap.sh}
          params:
            ${KUBE_VERSION}: {get_param: kubernetes_version}
            ${CLUSTER_ID}: {get_param: cluster_id}
            ${KUBE_APISERVER}: {get_param: apiserver_address}
            ${WORKER_NAME}: {get_param: name}
            ${BOOTSTRAP_TOKEN}: {get_param: bootstrap_token}
            ${CA_CONTENT}: {get_param: ca_content}
            ${CAKEY_CONTENT}: {get_param: cakey_content}
            ${DNS_SERVICE_IP}: {get_param: cluster_dns_service_ip}
            ${WC_NOTIFY}: { get_attr: [wait_handle, curl_cli] }
            ${CLOUD_PROVIDER_ENABLED}: {get_param: cloud_provider_enabled}
            ${AUTH_URL}: {get_param: auth_url}
            ${TRUSTEE_USER_ID}: {get_param: trustee_user_id}
            ${TRUSTEE_PASSWORD}: {get_param: trustee_password}
            ${TRUST_ID}: {get_param: trust_id}

  worker_port:
    type: OS::Neutron::Port
    properties:
      name:
        str_replace:
          template: magnum-$cluster-$worker
          params:
            $cluster: {get_param: cluster_id}
            $worker: {get_param: name}
      network: {get_param: fixed_network}
      security_groups:
        - get_param: worker_secgroup
      fixed_ips:
        - subnet: {get_param: fixed_subnet}
      allowed_address_pairs:
        - ip_address: {get_param: pods_network_cidr}
      replacement_policy: AUTO

  worker_port_floating:
    condition: floating_ip_enabled
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: worker_port}

outputs:
  kube_minion_ip:
    value: {get_attr: [worker_port, fixed_ips, 0, ip_address]}
    description: >
      This is the "public" IP address of the Kubernetes worker node.

  kube_minion_external_ip:
    condition: floating_ip_enabled
    value: {get_attr: [worker_port_floating, floating_ip_address]}
    description: >
      This is the "public" IP address of the Kubernetes worker node.

  OS::stack_id:
    value: { get_resource: worker }
    description: >
      This is the Nova server id of the node.
